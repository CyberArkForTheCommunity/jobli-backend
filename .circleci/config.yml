# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

parameters:
  region:
    type: string
    default: "eu-west-1"

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2
  node: circleci/node@4.7.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.8 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.8
        environment:
          CDK_REQUIRE_APPROVAL: never
          PIPENV_VENV_IN_PROJECT: true
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - restore_cache:
          keys:
            # Find a cache corresponding to this specific Pipfile.lock checksum
            # when this file is changed, this key will fail
            - venv-{{ checksum "Pipfile.lock" }}
      - run:
          name: Install Dependencies
          command: pipenv sync --dev
      - save_cache:
          key: venv-{{ checksum "Pipfile.lock" }}
          paths:
            - .venv
      - run:
          name: Run tests
          command: pipenv run pytest -v tests/unit --junitxml unit-test-results.xml
      - store_test_results:
          path: unit-test-results.xml
      - run:
          name: Build Lambda
          command: pipenv run ./build.py
      - run:
          name: "What was my custom environment variable?"
          command: echo ${CDK_REQUIRE_APPROVAL}
      - run:
          name: "context environment variable"
          command: echo ${MY_SECRET}
#      - run:
#          name: Deploy
#          command: pipenv run ./deploy.py --no-build --region << pipeline.parameters.region >> --require-approval ${CDK_REQUIRE_APPROVAL}

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  jobli-backend: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
